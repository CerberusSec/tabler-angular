webpackJsonp([2],{TXVA:function(n,a,s){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var o=s("WT6e"),p=s("KWFg"),t={sections:[{description:s("hLUR"),component:p.a,files:[{file:"forms-basic.component.ts",content:s("sW1/")}]}]},e=function(){},c=s("9pkN"),l=s("NfKk"),r=s("aw/f"),i=s("gk/o"),u=s("VJIW"),k=s("v7sp"),m=s("WmKA"),d=s("Xjw4"),f=s("7DMc"),_=s("/CuN"),g=s("F6a+"),h=s("oZUJ"),b=s("EhhW"),w=s("Yi4Z"),y=s("bfOx"),v=s("g/oT"),x=s("xvT5"),j=s("o/kJ"),O=s("0iYE"),T=s("E/IV"),F=s("8bQ4"),W=s("O88U"),C=s("4oT2"),N=s("lSkH"),B=s("WHxf"),G=s("rkTs"),J=s("55By"),R=s("Y3NR"),A=s("XBw/"),I=s("SGGu"),K=s("h+R6"),M=s("lS/x"),S=s("RaSy"),U=s("l+PT"),X=s("GKJs");s.d(a,"FormsBasicConfigModuleNgFactory",function(){return z});var z=o._1(e,[],function(n){return o._12([o._13(512,o.j,o.X,[[8,[c.a,l.e,r.b,r.a,r.d,r.e,r.f,r.c,r.i,r.g,r.j,r.h,r.k,i.a,u.a,k.a,m.a]],[3,o.j],o.v]),o._13(4608,d.m,d.l,[o.s,[2,d.r]]),o._13(4608,f.A,f.A,[]),o._13(4608,f.g,f.g,[]),o._13(4608,_.a,_.a,[]),o._13(4608,g.a,g.a,[o.j,o.x,o.p,_.a,o.g]),o._13(4608,h.a,h.a,[]),o._13(4608,b.a,b.a,[]),o._13(4608,w.d,w.d,[w.i]),o._13(4608,w.j,w.j,[]),o._13(4608,w.g,w.g,[w.d,w.j]),o._13(512,d.c,d.c,[]),o._13(512,y.n,y.n,[[2,y.s],[2,y.k]]),o._13(512,f.x,f.x,[]),o._13(512,f.l,f.l,[]),o._13(512,f.t,f.t,[]),o._13(512,v.b,v.b,[]),o._13(512,v.d,v.d,[]),o._13(512,v.c,v.c,[]),o._13(512,v.g,v.g,[]),o._13(512,v.e,v.e,[]),o._13(512,v.a,v.a,[]),o._13(512,v.f,v.f,[]),o._13(512,x.a,x.a,[]),o._13(512,j.a,j.a,[]),o._13(512,O.a,O.a,[]),o._13(512,T.a,T.a,[]),o._13(512,F.a,F.a,[]),o._13(512,W.a,W.a,[]),o._13(512,C.a,C.a,[]),o._13(512,N.a,N.a,[]),o._13(512,B.a,B.a,[]),o._13(512,G.a,G.a,[]),o._13(512,J.a,J.a,[]),o._13(512,R.a,R.a,[]),o._13(512,w.h,w.h,[]),o._13(512,A.a,A.a,[]),o._13(512,I.a,I.a,[]),o._13(512,K.a,K.a,[]),o._13(512,M.a,M.a,[]),o._13(512,e,e,[]),o._13(256,S.a,{autoClose:!0},[]),o._13(1024,w.i,function(){return[{types:[{name:"formly-group",component:w.k}]},{types:[{name:"input",component:A.c,wrappers:["fieldset","label"]},{name:"checkbox",component:A.b,wrappers:["fieldset"],defaultOptions:{templateOptions:{indeterminate:!0}}},{name:"radio",component:A.e,wrappers:["fieldset","label"],defaultOptions:{templateOptions:{options:[]}}},{name:"select",component:A.f,wrappers:["fieldset","label"],defaultOptions:{templateOptions:{options:[]}}},{name:"textarea",component:A.g,wrappers:["fieldset","label"],defaultOptions:{templateOptions:{cols:1,rows:1}}},{name:"multicheckbox",component:A.d,wrappers:["fieldset","label"],defaultOptions:{templateOptions:{options:[]}}}],wrappers:[{name:"label",component:A.j},{name:"description",component:A.h},{name:"validation-message",component:A.k},{name:"fieldset",component:A.i},{name:"addons",component:A.l}],manipulators:[{class:A.m,method:"run"},{class:A.n,method:"run"},{class:A.o,method:"run"}]},{types:[{name:"formly-group",component:w.k}]},{types:[{name:"inputHorizontal",extends:"input",wrappers:["fieldset","horizontalWrapper"]}],wrappers:[{name:"horizontalWrapper",component:U.a},{name:"wrapper",component:U.a}],validators:[],validationMessages:[{name:"email",message:"The email address does not seem to be valid."},{name:"required",message:"This field is required."}]}]},[]),o._13(1024,y.i,function(){return[[{path:"",component:X.a,data:t}]]},[])])})},hLUR:function(n,a){n.exports='<h2 id="basic-forms">Basic forms</h2>\n<p>The <code>ui-form</code></code> component allows you to generate forms with the minimal amount of code possible. </p>\n<p>It&#39;s built as a small abstraction over <a href="https://github.com/formly-js/ngx-formly">ngx-formly</a> and should\nsupport all of it&#39;s functionality. If not, then this is a bug.</p>\n<p>The fields of the form are defined in an array. The items in the array\ncan be created using the <code>Field</code> helper class. </p>\n'},"sW1/":function(n,a){n.exports='<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Component <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/core\'</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormGroup <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/forms\'</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Field <span class="token punctuation" >}</span> from <span class="token string" >\'@tabler/angular-forms\'</span>\n\n@<span class="token function" >Component</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  selector<span class="token punctuation" >:</span> <span class="token string" >\'app-forms-demo-basic\'</span><span class="token punctuation" >,</span>\n  template<span class="token punctuation" >:</span> `\n    <span class="token operator" >&lt;</span>div <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"row"</span><span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>div <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"col"</span><span class="token operator" >></span>\n        <span class="token operator" >&lt;</span>ui<span class="token operator" >-</span>form <span class="token punctuation" >[</span>form<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"form"</span> <span class="token punctuation" >[</span>fields<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"fields"</span> <span class="token punctuation" >[</span>model<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"model"</span><span class="token operator" >></span><span class="token operator" >&lt;</span><span class="token operator" >/</span>ui<span class="token operator" >-</span>form<span class="token operator" >></span>\n      <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>div <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"col"</span><span class="token operator" >></span>\n        <span class="token operator" >&lt;</span>app<span class="token operator" >-</span>docs<span class="token operator" >-</span>json <span class="token punctuation" >[</span>model<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"model"</span><span class="token operator" >></span><span class="token operator" >&lt;</span><span class="token operator" >/</span>app<span class="token operator" >-</span>docs<span class="token operator" >-</span>json<span class="token operator" >></span>\n      <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n  `<span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token keyword" >export</span> <span class="token keyword" >class</span> <span class="token class-name" >FormsBasicComponent</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >public</span> form <span class="token operator" >=</span> <span class="token keyword" >new</span> <span class="token class-name" >FormGroup</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n  <span class="token keyword" >public</span> model <span class="token operator" >=</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span>\n  <span class="token keyword" >public</span> fields <span class="token operator" >=</span> <span class="token punctuation" >[</span>\n    Field<span class="token punctuation" >.</span><span class="token function" >input</span><span class="token punctuation" >(</span><span class="token string" >\'name\'</span><span class="token punctuation" >,</span> <span class="token punctuation" >{</span>\n      label<span class="token punctuation" >:</span> <span class="token string" >\'Name\'</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >]</span>\n<span class="token punctuation" >}</span>\n'}});